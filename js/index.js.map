{"version":3,"sources":["../src/index.js"],"names":["NAMES","HEPINDEX","map","name","Card","props","state","spaces","card","event","temp","slice","keyCode","hold","i","setState","newSpaces","color","index","push","type","e","rotateDisplay","onClick","display","selected","React","Component","Header","myTurn","OtherHands","played","PlayedTiles","MyHand","gameState","discardClicked","playClicked","cards","renderButton","Community","basin","colorCounts","listBasin","count","Board","listBoard","Login","username","password","target","value","updateUsername","Waiting","socket","emit","user","getCookie","id","player","players","length","ready","active","renderPlayers","buttonStatus","userReady","Display","selectorClick","hands","allPlayed","renderOtherHands","renderSelector","j","boardClick","Game","selectCards","ID","handleCardClick","playedRaw","selectedColor","isSwap","rawCards","on","updateActiveCards","queuedForDiscard","Array","discardCount","fill","cardsToRemove","cardsToDiscard","includes","matched","k","cardsEqual","splice","processCode","newHand","hand","number","selectedNumberCard","action","selectedActionCard","spaceState","tempPlayed","oldPlayed","playedToRecycle","reflexused","isActive","isActiveReflexed","newPlayed","rest","pid","cardType","accessable","selectCardsIndex","tempDiscard","found","newSelected","currentPlayer","prevState","newCounts","setupcomplete","emitCheck","selectColor","newState","rotation","nameSpaces","arraysAreRotations","purgeNull","cardSpaces","boardSpaces","purged","handleSelectorClick","handleBoardClick","handlePlayClick","handleDiscardClick","waiting","showMe","abandonRoom","connectTo","io","connect","currentCookie","localData","console","log","renderLogin","data","Object","assign","renderGame","document","cookie","renderLobby","ReactDOM","render","getElementById","availableGames","pass","logMeIn","a","b","one","two","three","four","five","six","seven","decodedCookie","decodeURIComponent","ca","split","c","charAt","substring","indexOf","Lobby","available","creator","lobbies","games","joinRoom","parseInt","maxPlayers","nameChange","selectChange","createNewValues","renderAvailable"],"mappings":"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","file":"index.js","sourcesContent":["\r\n\r\nconst NAMES = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"];\r\n\r\nconst HEPINDEX = NAMES.map(name => name + \"hep\");\r\n\r\nclass Card extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            spaces: props.card.spaces,\r\n            card: props.card,\r\n        }\r\n    }\r\n\r\n    rotateDisplay(event) {\r\n        let temp = this.state.spaces.slice();\r\n        if (event.keyCode === 81) {\r\n            let hold = temp[0];\r\n            for (var i = 0; i < 6; i++) {\r\n                temp[i] = temp[i + 1];\r\n            }\r\n            temp[6] = hold;\r\n        } else if (event.keyCode === 69) {\r\n            let hold = temp[6];\r\n            for (var i = 6; i > 0; i--) {\r\n                temp[i] = temp[i - 1];\r\n            }\r\n            temp[0] = hold;\r\n        }\r\n        this.setState({\r\n            spaces: temp\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let newSpaces = this.state.spaces.map((color, index) => <li key={index} className={\"dot small \" + color + \" \" + HEPINDEX[index]}>{}</li>);\r\n        newSpaces.push(<li key={7} className=\"cardType\">{this.props.card.type}</li>);\r\n        return (<div onKeyDown={(e) => this.rotateDisplay(e)}\r\n            tabIndex=\"0\"\r\n            className=\"cardRotateContainer\">\r\n            <ul onClick={() => this.props.onClick(this.state.card)}\r\n                className={\"card \" + this.props.display + \" \" + this.props.selected}\r\n            >  {newSpaces} </ul></div>);\r\n    }\r\n}\r\n\r\nfunction Header(props) {\r\n    let myTurn = props.myTurn ? \"My turn\" : \"Not my turn\";\r\n    return <p>{myTurn}</p>\r\n}\r\n\r\nfunction OtherHands(props) {\r\n    return <div className=\"otherHands\">\r\n        {props.played}\r\n    </div>;\r\n}\r\n\r\nfunction PlayedTiles(props) {\r\n    return <div className=\"playedtiles\">{props.played}</div>;\r\n}\r\n\r\nclass MyHand extends React.Component {\r\n    renderButton() {\r\n        if (this.props.gameState === 'discardphase') {\r\n            return <button onClick={() => this.props.discardClicked()} className={\"playbutton\"}>{\"DiscardTiles\"}</button>\r\n        } else {\r\n            return <button disabled={(this.props.gameState === \"setup\") || !this.props.myTurn} onClick={() => this.props.playClicked()} className={\"playbutton\"}>{\"Play Tiles\"}</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"hand\">\r\n            {this.props.cards}\r\n            {this.renderButton()}\r\n        </div>;\r\n    }\r\n}\r\n\r\nfunction Community(props) {\r\n    const basin = props.colorCounts;\r\n    const listBasin = basin.map(color => (\r\n        <button\r\n            className={\"dot \" + color.color}\r\n            key={color.color}\r\n            onClick={() => props.onClick(color)}\r\n        >\r\n            {color.count}\r\n        </button>\r\n    ));\r\n    return <ul>{listBasin}</ul>;\r\n}\r\n\r\nfunction Board(props) {\r\n    const spaces = props.spaces;\r\n    const listBoard = spaces.map((color, index) => (\r\n        <button\r\n            className={\"dot \" + color + \" \" + HEPINDEX[index]}\r\n            key={index}\r\n            onClick={() => props.onClick(color, index)}\r\n        >{}</button>\r\n    ));\r\n    return <ul className=\"board\">{listBoard}</ul>;\r\n}\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\"\r\n        }\r\n    }\r\n\r\n    updatePassword(e) {\r\n        this.setState({\r\n            password: e.target.value\r\n        })\r\n    }\r\n\r\n    updateUsername(e) {\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        //<label htmlFor={\"passw\"}><b>{\"Password\"}</b></label>\r\n        //<input type={\"password\"} id={\"passw\"} placeholder={\"Enter Password\"} onChange={(e) => this.updatePassword(e)}></input>\r\n        return <div className={\"Login\"}>\r\n            <form id=\"login\">\r\n                <label htmlFor={\"uname\"}><b>{\"Username\"}</b></label>\r\n                <input type={\"text\"} id={\"uname\"} placeholder={\"Enter Username\"} onChange={(e) => this.updateUsername(e)}></input>\r\n                <button onClick={() => this.props.onClick(this.state.username, this.state.password)} type={\"button\"}>{\"Login\"}</button>\r\n            </form>\r\n        </div>;\r\n    }\r\n}\r\n\r\nclass Waiting extends React.Component {\r\n    userReady() {\r\n        socket.emit(\"userreadied\", {\r\n            user: getCookie(),\r\n            id: this.props.id\r\n        });\r\n    }\r\n\r\n    buttonStatus() {\r\n        let player = this.props.players.slice();\r\n        let user = getCookie();\r\n        for (let i = 0; i < player.length; i++) {\r\n            if (player[i].name === user) {\r\n                return player[i].ready;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderPlayers() {\r\n        let player = this.props.players.slice();\r\n        player = player.map(player => { \r\n            let active = player.ready ? \"readied\" : \"notreadied\";\r\n            return <li index={player.name} className={\"pregameListItem \" + active}>{player.name}</li>\r\n        });\r\n        return <ul>{player}</ul>\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"Waiting\"}>\r\n                {this.renderPlayers()}\r\n                <button disabled={this.buttonStatus()} onClick={() => this.userReady()} type={\"button\"}>{\"Ready\"}</button>\r\n            </div>);\r\n    }\r\n}\r\n\r\nclass Display extends React.Component {\r\n    renderSelector() {\r\n        return (\r\n            <Community\r\n                onClick={i => this.props.selectorClick(i)}\r\n                colorCounts={this.props.colorCounts}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderOtherHands() {\r\n        let hands = [];\r\n        for (let i = 0; i < this.props.allPlayed.length; i++) {\r\n            hands.push(<OtherHands played={this.props.allPlayed[i]}/>);\r\n        }\r\n        return hands;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display\">\r\n                {this.renderOtherHands()}\r\n                <Header myTurn={this.props.myTurn}/>\r\n                {this.renderSelector()}\r\n                <Board\r\n                    onClick={(i, j) => this.props.boardClick(i, j)}\r\n                    spaces={this.props.spaces}\r\n                />\r\n                <PlayedTiles played={this.props.played} />\r\n                <MyHand playClicked={() => this.props.playClicked()} \r\n                        discardClicked={() => this.props.discardClicked()}\r\n                        cards={this.props.cards} \r\n                        myTurn={this.props.myTurn}\r\n                        gameState={this.props.gameState}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let selectCards = props.selectCards;\r\n        let cards = selectCards.map((name) => { return (<Card key={name.ID} onClick={(i) => this.handleCardClick(i)} display={\"\"} card={name} />) });\r\n        this.state = {\r\n            playedRaw: props.played,\r\n            played: [],\r\n            selectedColor: null,\r\n            isSwap: false,\r\n            index: null,\r\n            rawCards: selectCards,\r\n            cards: cards,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.on('boardChange', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n        this.props.socket.on('cardPlayed', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n        this.props.socket.on('cardUpdate', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n        this.props.socket.on('discardphase', () => {\r\n           this.setState({\r\n               queuedForDiscard: Array(this.props.discardCount).fill(null)\r\n           }) \r\n        });\r\n    }\r\n    \r\n    handleDiscardClick() {\r\n        let cardsToRemove = this.props.selectCards.slice();\r\n        let cardsToDiscard = this.state.queuedForDiscard.slice();\r\n        let j = 0;\r\n        if (!cardsToDiscard.includes(null)) {\r\n            while (j < cardsToRemove.length) {\r\n                let matched = false;\r\n                for (let k = 0; k < cardsToDiscard.length; k++) {\r\n                    if (cardsEqual(cardsToRemove[j], cardsToDiscard[k])) {\r\n                        cardsToRemove.splice(j, 1);\r\n                        cardsToDiscard.splice(k, 1);\r\n                        matched = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!matched) {\r\n                    j++;\r\n                }\r\n            }\r\n            if (this.props.processCode === null) {\r\n                socket.emit('discardPresetup', {\r\n                    newHand: cardsToRemove,\r\n                    user: getCookie(),\r\n                    id: this.props.id\r\n\r\n                });\r\n            } else {\r\n                socket.emit('discardNormalHand', {\r\n                    hand:cardsToRemove,\r\n                    id: this.props.id\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handlePlayClick() {\r\n        let number = this.state.selectedNumberCard;\r\n        let action = this.state.selectedActionCard;\r\n        let spaceState = this.props.spaces.slice();\r\n        let tempPlayed = [];\r\n        let oldPlayed = [];\r\n        let playedToRecycle = this.props.played.slice();\r\n        let cardsToRemove = this.props.selectCards.slice();\r\n        let reflexused = false;\r\n        if (number != null && action != null) {\r\n            if (this.isActive(spaceState, number) && this.isActive(spaceState, action) && (action.type != \"A\" && action.type != \"R\" && action.type != \"H\")) {\r\n                let j = 0;\r\n                while (j < cardsToRemove.length) {\r\n                    if (cardsEqual(cardsToRemove[j], number) || cardsEqual(cardsToRemove[j], action)) {\r\n                        tempPlayed.push(cardsToRemove.splice(j, 1)[0]);\r\n                    } else {\r\n                        j++;\r\n                    }\r\n                }\r\n                j = 0;\r\n                while (j < playedToRecycle.length) {\r\n                    if (cardsEqual(playedToRecycle[j], number) || cardsEqual(playedToRecycle[j], action)) {\r\n                        oldPlayed.push(playedToRecycle[j]);\r\n                    }\r\n                    j++;\r\n                }\r\n            } else if (this.props.gameState === \"reflexed\" && \r\n                        (this.isActiveReflexed(spaceState, number) && this.isActive(spaceState, action) ||\r\n                        this.isActive(spaceState, number) && this.isActiveReflexed(spaceState, action)) &&\r\n                        (action.type != \"A\" && action.type != \"R\" && action.type != \"H\")) {\r\n                let j = 0;\r\n                reflexused = true;\r\n                while (j < cardsToRemove.length) {\r\n                    if (cardsEqual(cardsToRemove[j], number) || cardsEqual(cardsToRemove[j], action)) {\r\n                        tempPlayed.push(cardsToRemove.splice(j, 1)[0]);\r\n                    } else {\r\n                        j++;\r\n                    }\r\n                }\r\n                if (cardsToRemove.length === this.props.selectCards.length) {\r\n                    return false;\r\n                }\r\n                j = 0;\r\n                while (j < playedToRecycle.length) {\r\n                    if (cardsEqual(playedToRecycle[j], number) || cardsEqual(playedToRecycle[j], action)) {\r\n                        oldPlayed.push(playedToRecycle[j]);\r\n                    }\r\n                    j++;\r\n                }\r\n            }\r\n        } else if (action != null) {\r\n            if (this.isActive(spaceState, action) && (action.type === \"A\" || action.type === \"R\" || action.type === \"H\")) {\r\n                let j = 0;\r\n                while (j < cardsToRemove.length) {\r\n                    if (cardsEqual(cardsToRemove[j], action)) {\r\n                        tempPlayed.push(cardsToRemove.splice(j, 1)[0]);\r\n                    } else {\r\n                        j++;\r\n                    }\r\n                }\r\n                j = 0;\r\n                while (j < playedToRecycle.length) {\r\n                    if (cardsEqual(playedToRecycle[j], action)) {\r\n                        oldPlayed.push(playedToRecycle[j]);\r\n                    }\r\n                    j++;\r\n                }\r\n            } else if (this.props.gameState === \"reflexed\" && this.isActiveReflexed(spaceState, action) && (action.type === \"A\" || action.type === \"R\" || action.type === \"H\")) {\r\n                let j = 0;\r\n                reflexused = true;\r\n                while (j < cardsToRemove.length) {\r\n                    if (cardsEqual(cardsToRemove[j], action)) {\r\n                        tempPlayed.push(cardsToRemove.splice(j, 1)[0]);\r\n                    } else {\r\n                        j++;\r\n                    }\r\n                }\r\n                if (cardsToRemove.length === this.props.selectCards.length) {\r\n                    return false;\r\n                }\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n        this.setState({\r\n            selectedNumberCard: null,\r\n            selectedActionCard: null,\r\n        });\r\n        socket.emit('cardPlayed', {\r\n            newPlayed: tempPlayed,\r\n            oldPlayed: oldPlayed,\r\n            rest: cardsToRemove,\r\n            pid: this.props.pid,\r\n            id: this.props.id,\r\n            reflexused: reflexused\r\n        });\r\n    }\r\n\r\n    handleCardClick(i) {\r\n        let selectCards = this.props.selectCards.slice();\r\n        let played = this.props.played.slice();\r\n        let cardType = i.type;\r\n        let accessable = this.props.processCode === null ? selectCards.length : this.props.processCode;\r\n        let selectCardsIndex = -1;\r\n        for (let j = 0; j < selectCards.length; j++) {\r\n            if (cardsEqual(i, selectCards[j])) {\r\n                selectCardsIndex = j;\r\n                break;\r\n            }\r\n        }\r\n        if (this.props.gameState === 'discardphase') {\r\n            let tempDiscard = this.state.queuedForDiscard.slice();\r\n            if (selectCardsIndex >= selectCards.length - accessable) {\r\n                let found = false;\r\n                for (let j = 0; j < tempDiscard.length; j++) {\r\n                    if (cardsEqual(tempDiscard[j], i)) {\r\n                        tempDiscard[j] = null;\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found && tempDiscard.includes(null)) {\r\n                    for (let j = 0; j < tempDiscard.length; j++) {\r\n                        if (tempDiscard[j] === null) {\r\n                            tempDiscard[j] = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    queuedForDiscard: tempDiscard,\r\n                    cards: selectCards.map((name) => {\r\n                        let selected = \"\";\r\n                        for (let j = 0; j < tempDiscard.length; j++) {\r\n                            if (cardsEqual(tempDiscard[j], name)) {\r\n                                selected = \"selectedCard\";\r\n                                break;\r\n                            }\r\n                        }\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={\"\"} card={name} />);\r\n                    }),\r\n                })\r\n            }\r\n        } else {\r\n            if (cardType === \"1\" || cardType === \"2\" || cardType === \"3\") {\r\n                let newSelected = (i === this.state.selectedNumberCard) ? null : i;\r\n                this.setState({\r\n                    selectedNumberCard: newSelected,\r\n                    cards: selectCards.map((name) => {\r\n                        let active = \"\";\r\n                        if (this.isActive(this.props.spaces, name)) {\r\n                            active = \"active\";\r\n                        } else if ((this.props.gameState === \"reflexed\" && this.props.currentPlayer === this.props.pid) && this.isActiveReflexed(this.props.spaces, name)) {\r\n                            active = \"activeReflexed\";\r\n                        }\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedActionCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    }),\r\n                    played: played.map((name) => {\r\n                        let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedActionCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    })\r\n                });\r\n            } else {\r\n                let newSelected = (i === this.state.selectedActionCard) ? null : i;\r\n                this.setState({\r\n                    selectedActionCard: newSelected,\r\n                    cards: selectCards.map((name) => {\r\n                        let active = \"\";\r\n                        if (this.isActive(this.props.spaces, name)) {\r\n                            active = \"active\";\r\n                        } else if ((this.props.gameState === \"reflexed\" && this.props.currentPlayer === this.props.pid) && this.isActiveReflexed(this.props.spaces, name)) {\r\n                            active = \"activeReflexed\";\r\n                        }\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedNumberCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    }),\r\n                    played: played.map((name) => {\r\n                        let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedNumberCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    handleSelectorClick(i) {\r\n        if (this.props.currentPlayer === this.props.pid) {\r\n            if (i.count > 0) {\r\n                this.setState({\r\n                    selectedColor: i.color,\r\n                    isSwap: false,\r\n                    index: null,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleBoardClick(i, index) {\r\n        const prevState = this.state;\r\n        if (this.props.currentPlayer === this.props.pid) {\r\n            if (this.props.gameState === \"setup\") {\r\n                if (prevState.selectedColor != null && this.props.spaces[index] === null) {\r\n                    // swap with stack\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    newSpaces[index] = prevState.selectedColor;\r\n                    let newCounts = this.props.colorCounts.slice();\r\n                    let setupcomplete = true;\r\n                    for (var j = 0; j < 7; j++) {\r\n                        if (newSpaces[j] === null) {\r\n                            setupcomplete = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (var j = 0; j < newCounts.length; j++) {\r\n                        if (newCounts[j].color === prevState.selectedColor) {\r\n                            newCounts[j].count--;\r\n                        }\r\n                        if (\r\n                            this.props.spaces[index] != null &&\r\n                            this.props.spaces[index] === newCounts[j].color\r\n                        ) {\r\n                            newCounts[j].count++;\r\n                        }\r\n                    }\r\n                    socket.emit('boardChange', {newSpaces: newSpaces, newCounts: newCounts, id: this.props.id });\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                        gameState: setupcomplete ? \"\" : \"setup\"\r\n                    });\r\n                }\r\n            } else {\r\n                if (prevState.index === index) {\r\n                    //Selecting already selected deselects\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null\r\n                    });\r\n                } else if (prevState.selectedColor != null) {\r\n                    // swap with stack\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    newSpaces[index] = prevState.selectedColor;\r\n                    let newCounts = this.props.colorCounts.slice();\r\n                    for (var j = 0; j < newCounts.length; j++) {\r\n                        if (newCounts[j].color === prevState.selectedColor) {\r\n                            newCounts[j].count--;\r\n                        }\r\n                        if (\r\n                            this.props.spaces[index] != null &&\r\n                            this.props.spaces[index] === newCounts[j].color\r\n                        ) {\r\n                            newCounts[j].count++;\r\n                        }\r\n                    }\r\n                    let emitCheck = this.props.gameState === 'bonusswap' ? 'bonusswap' : 'boardChange';\r\n                    socket.emit(emitCheck, {newSpaces: newSpaces, newCounts: newCounts, id: this.props.id});\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                    });\r\n                } else if (prevState.isSwap) {\r\n                    //Swapping with active thing\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    let temp = newSpaces[index];\r\n                    newSpaces[index] = newSpaces[prevState.index];\r\n                    newSpaces[prevState.index] = temp;\r\n                    let emitCheck = this.props.gameState === 'bonusswap' ? 'bonusswap' : 'boardChange';\r\n                    socket.emit(emitCheck, {newSpaces: newSpaces, newCounts: this.props.colorCounts, id: this.props.id});\r\n                    this.setState({\r\n                        selectColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                    });\r\n                } else {\r\n                    //Selecting for swap\r\n                    this.setState({\r\n                        selectColor: null,\r\n                        isSwap: true,\r\n                        index: index\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateActiveCards(newState, selectCards) {\r\n        return (selectCards.map((name) => {\r\n            let active = \"\";\r\n            if (this.isActive(newState, name)) {\r\n                active = \"active\";\r\n            } else if ((this.props.gameState === \"reflexed\" && this.props.currentPlayer === this.props.pid) && this.isActiveReflexed(newState, name)) {\r\n                active = \"activeReflexed\";\r\n            }\r\n            let selected = (cardsEqual(this.state.selectedActionCard, name) || cardsEqual(this.state.selectedNumberCard, name)) ? \"selectedCard\" : \"\";\r\n            return (<Card key={name.ID} onClick={(i) => this.handleCardClick(i)} selected={selected} display={active} card={name} />);\r\n        }));\r\n    }\r\n\r\n    isActive(newState, name) {\r\n        let rotation = newState.slice();\r\n        let nameSpaces = name.spaces.slice();\r\n        return this.arraysAreRotations(nameSpaces, rotation);\r\n    }\r\n\r\n    isActiveReflexed(newState, name) {\r\n        let rotation = this.purgeNull(newState);\r\n        let nameSpaces = this.purgeNull(name.spaces);\r\n        return this.arraysAreRotations(nameSpaces, rotation);\r\n    }\r\n\r\n    arraysAreRotations(cardSpaces, boardSpaces) {\r\n        let active = true;\r\n        for (let j = 0; j < boardSpaces.length; j++) {\r\n            active = false;\r\n            let k = 0;\r\n            for (let i = 0; i < boardSpaces.length; i++) {\r\n                if (cardSpaces[k] === null || cardSpaces[k] === boardSpaces[i]) {\r\n                    k++;\r\n                    if (k === cardSpaces.length) {\r\n                        active = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            //Match found\r\n            if (active) {\r\n                break;\r\n            }\r\n            //Rotates board\r\n            let temp = boardSpaces[0];\r\n            for (let i = 0; i < boardSpaces.length; i++) {\r\n                boardSpaces[i] = boardSpaces[i + 1];\r\n            }\r\n            boardSpaces[boardSpaces.length - 1] = temp;\r\n        }\r\n        return active;\r\n    }\r\n\r\n    purgeNull(name) {\r\n        let purged = name.slice();\r\n        let j = 0;\r\n        while (j < purged.length) {\r\n            if (purged[j] === null) {\r\n                purged.splice(j, 1);\r\n            } else {\r\n                j++;\r\n            }\r\n        }\r\n        return purged;\r\n    }\r\n\r\n    abandonRoom() {\r\n        socket.emit(\"abandonRoom\", {\r\n            id: this.props.id,\r\n            user: getCookie()\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let allPlayed = this.props.allPlayed.slice();\r\n        allPlayed.splice(this.props.pid, 1);\r\n        for (let i = 0; i < allPlayed.length; i++) {\r\n            allPlayed[i] = this.updateActiveCards(this.props.spaces, allPlayed[i]);\r\n        }\r\n        let display = <Display\r\n            spaces={this.props.spaces} //[]\r\n            colorCounts={this.props.colorCounts} //[]\r\n            selectorClick={i => this.handleSelectorClick(i)} //function\r\n            boardClick={(i, j) => this.handleBoardClick(i, j)} //function\r\n            cards={this.state.cards} //[<Cards>]\r\n            played={this.state.played}//[<Cards>]\r\n            playClicked={() => this.handlePlayClick()} //function\r\n            discardClicked={() => this.handleDiscardClick()}\r\n            myTurn={this.props.pid === this.props.currentPlayer}\r\n            gameState={this.props.gameState}\r\n            allPlayed={allPlayed}\r\n        />;\r\n        let waiting = <Waiting id={this.props.id} players={this.props.players}/>;\r\n        let showMe = this.props.gameState === \"prestart\" ? waiting : display;\r\n        return (<div id={\"game\"}>\r\n                    <button id={\"backbutton\"} type={'button'} onClick={() => this.abandonRoom()}>{\"Back\"}</button>\r\n                    {showMe}\r\n                </div>);\r\n    }\r\n}\r\n\r\n//var connectTo = 'https://damoclesgame.herokuapp.com';\r\nvar connectTo = 'http://localhost:3000';\r\nvar socket = io.connect(connectTo);\r\n\r\n    let currentCookie = getCookie();\r\n    let localData = {};\r\n    if (currentCookie != \"\") {\r\n        console.log(currentCookie);\r\n        socket.emit('refreshCookie', currentCookie);\r\n    } else {\r\n        renderLogin(localData, socket);\r\n    }\r\n    socket.on('standby', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('boardChange', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('setupphase', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('cardUpdate', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('discardphase', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('cardPlayed', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('bonusswap', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('reflexed', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('cookify', function(data) {\r\n        document.cookie = data.cookie;\r\n        Object.assign(localData, data);\r\n        renderLobby(localData, socket);\r\n    });\r\n    socket.on('newroom', function(data) {\r\n        Object.assign(localData, data);\r\n        renderLobby(localData, socket);\r\n    });\r\n    socket.on('lobify', function(data) {\r\n        Object.assign(localData, data);\r\n        renderLobby(localData, socket);\r\n    });\r\n    socket.on('userjoined', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('userready', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n\r\nfunction renderGame(data, socket) {\r\n    ReactDOM.render(<Game   spaces={data.spaces} \r\n        colorCounts={data.colorCounts}\r\n        selectCards={data.selectCards}\r\n        gameState={data.gameState}\r\n        pid={data.pid}\r\n        currentPlayer={data.currentPlayer}\r\n        socket={socket}\r\n        played={data.played[data.pid]}\r\n        allPlayed={data.played}\r\n        discardCount={data.discardCount}\r\n        processCode={data.processCode}\r\n        players={data.players}\r\n        id={data.id}\r\n\r\n        />, document.getElementById(\"root\"));\r\n}\r\n\r\nfunction renderLobby(data, socket) {\r\n    ReactDOM.render(<Lobby\r\n        available={data.availableGames}\r\n    />, document.getElementById(\"root\"));\r\n}\r\n\r\nfunction renderLogin() {\r\n    ReactDOM.render(<Login\r\n            onClick={(user, pass) => logMeIn(user, pass)}\r\n        />, document.getElementById(\"root\"));\r\n}\r\n\r\nfunction logMeIn(user, pass) {\r\n    socket.emit(\"login\", {\r\n        username: user,\r\n        password: pass\r\n    });\r\n}\r\n\r\nfunction cardsEqual(a, b) {\r\n    return (a != null && b != null && a.one === b.one &&\r\n            a.two === b.two &&\r\n            a.three === b.three &&\r\n            a.four === b.four &&\r\n            a.five === b.five &&\r\n            a.six === b.six &&\r\n            a.seven === b.seven &&\r\n            a.type === b.type &&\r\n            a.id === b.id\r\n    );\r\n}\r\n\r\nfunction getCookie() {\r\n    var name = \"Damocles=\";\r\n    var decodedCookie = decodeURIComponent(document.cookie);\r\n    var ca = decodedCookie.split(\",\");\r\n    for(var i = 0; i < ca.length; i++) {\r\n        var c = ca[i];\r\n        while (c.charAt(0) == ' ') {\r\n            c = c.substring(1);\r\n        }\r\n        if (c.indexOf(name) == 0) {\r\n            return c.substring(name.length, c.length);\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\nclass Lobby extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        available: [],\r\n        selected: 3,\r\n        name: null\r\n      }\r\n    }\r\n    \r\n    selectChange(e) {\r\n      this.setState({\r\n        selected: e.target.value\r\n      });\r\n    }\r\n    \r\n    nameChange(e) {\r\n      this.setState({\r\n        name: e.target.value\r\n      });\r\n    }\r\n    \r\n    createNewValues() {\r\n        let name = this.state.name;\r\n        if (name != null) {\r\n            socket.emit(\"roomcreated\", {\r\n                name: name,\r\n                players: this.state.selected,\r\n                creator: getCookie()\r\n            });\r\n        }\r\n    }\r\n\r\n    joinRoom(id) {\r\n        socket.emit('roomjoined', {\r\n            user: getCookie(),\r\n            id: id\r\n        });\r\n    }\r\n\r\n    renderAvailable() {\r\n        let lobbies = [];\r\n        let games = this.props.available.slice();\r\n        for (let i = 0; i < games.length; i++) {\r\n            lobbies.push(<li \r\n                id={games[i].id}\r\n                className={\"lobbylist\"}\r\n                onDoubleClick={(e) => this.joinRoom(parseInt(e.target.id))}\r\n            >{games[i].name + \" - \" + games[i].maxPlayers}</li>);\r\n        }\r\n        return (<div className=\"browser\"><label>{\"Currently Available Rooms\"}</label><ul>{lobbies}</ul></div>\r\n        );\r\n    }\r\n    \r\n    render() {\r\n      return (<div id=\"lobby\">\r\n                <div id={\"newroomlabeldiv\"}>\r\n                    <label id={\"newroomlabel\"}>{\"New Room Name\"}</label>\r\n                    <input id={\"newroominput\"} onInput={(e) => this.nameChange(e)} type=\"text\"></input>\r\n                </div>\r\n                <div id={\"newroommaxplayerdiv\"}>\r\n                    <label id={\"maxplayer\"}>{\"MAX PLAYERS\"}</label>\r\n                    <select id={\"playeroptions\"} onChange={(e) => this.selectChange(e)} id=\"max_val\">\r\n                        <option value=\"3\">3</option>\r\n                        <option value=\"4\">4</option>\r\n                        <option value=\"5\">5</option>\r\n                        <option value=\"6\">6</option>\r\n                    </select>\r\n                </div>\r\n                <button id={\"newroombutton\"} type=\"button\" onClick={() => this.createNewValues()}>{\"New Instance\"}</button>\r\n            {this.renderAvailable()}\r\n            </div> \r\n          );\r\n    }\r\n}\r\n"]}