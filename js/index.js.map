{"version":3,"sources":["../src/index.js"],"names":["COLORS","RED","BLUE","GREEN","BLACK","GOLD","IDS","Set","NAMES","HEPINDEX","map","name","gold","generate","blue","red","green","black","combust","oracle","reflex","conquer","haste","one","two","three","Card","props","spaces","Array","fill","card","four","five","six","seven","state","event","temp","slice","keyCode","hold","i","setState","newSpaces","color","index","push","type","e","rotateDisplay","onClick","display","selected","React","Component","Header","myTurn","OtherHands","played","PlayedTiles","MyHand","gameState","discardClicked","playClicked","cards","renderButton","Community","basin","colorCounts","listBasin","count","Board","listBoard","Lobby","Display","selectorClick","hands","allPlayed","length","renderOtherHands","renderSelector","j","boardClick","Game","selectCards","ID","handleCardClick","playedRaw","selectedColor","isSwap","rawCards","socket","on","updateActiveCards","queuedForDiscard","discardCount","cardsToRemove","cardsToDiscard","includes","matched","k","cardsEqual","splice","processCode","emit","number","selectedNumberCard","action","selectedActionCard","spaceState","tempPlayed","isActive","newPlayed","rest","pid","cardType","accessable","selectCardsIndex","tempDiscard","found","newSelected","active","currentPlayer","prevState","newCounts","setupcomplete","selectColor","newState","rotation","handleSelectorClick","handleBoardClick","handlePlayClick","handleDiscardClick","lobby","startGame","showMe","connectTo","io","connect","console","log","data","localData","Object","assign","renderGame","ReactDOM","render","document","getElementById","a","b","id"],"mappings":"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","file":"index.js","sourcesContent":["const COLORS = {\r\n    RED: \"red\",\r\n    BLUE: \"blue\",\r\n    GREEN: \"green\",\r\n    BLACK: \"black\",\r\n    GOLD: \"gold\"\r\n};\r\n\r\nvar IDS = new Set();\r\n\r\nconst NAMES = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"];\r\n\r\nconst HEPINDEX = NAMES.map(name => name + \"hep\");\r\n\r\nvar gold = COLORS.GOLD;\r\nvar generate = \"G\";\r\nvar blue = COLORS.BLUE;\r\nvar red = COLORS.RED;\r\nvar green = COLORS.GREEN;\r\nvar gold = COLORS.GOLD;\r\nvar black = COLORS.BLACK;\r\nvar combust = \"C\";\r\nvar oracle = \"O\";\r\nvar reflex = \"R\";\r\nvar conquer = \"A\";\r\nvar haste = \"H\";\r\nvar one = \"1\";\r\nvar two = \"2\";\r\nvar three = \"3\";\r\n\r\nclass Card extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const spaces = Array(7).fill(null);\r\n        if (props.card.one != null) { spaces[0] = props.card.one; }\r\n        if (props.card.two != null) { spaces[1] = props.card.two; }\r\n        if (props.card.three != null) { spaces[2] = props.card.three; }\r\n        if (props.card.four != null) { spaces[3] = props.card.four; }\r\n        if (props.card.five != null) { spaces[4] = props.card.five; }\r\n        if (props.card.six != null) { spaces[5] = props.card.six; }\r\n        if (props.card.seven != null) { spaces[6] = props.card.seven; }\r\n        this.state = {\r\n            spaces: spaces,\r\n            card: props.card,\r\n        }\r\n    }\r\n\r\n    rotateDisplay(event) {\r\n        let temp = this.state.spaces.slice();\r\n        if (event.keyCode === 81) {\r\n            let hold = temp[0];\r\n            for (var i = 0; i < 6; i++) {\r\n                temp[i] = temp[i + 1];\r\n            }\r\n            temp[6] = hold;\r\n        } else if (event.keyCode === 69) {\r\n            let hold = temp[6];\r\n            for (var i = 6; i > 0; i--) {\r\n                temp[i] = temp[i - 1];\r\n            }\r\n            temp[0] = hold;\r\n        }\r\n        this.setState({\r\n            spaces: temp\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let newSpaces = this.state.spaces.map((color, index) => <li key={index} className={\"dot small \" + color + \" \" + HEPINDEX[index]}>{}</li>);\r\n        newSpaces.push(<li key={7} className=\"cardType\">{this.props.card.type}</li>);\r\n        return (<div onKeyDown={(e) => this.rotateDisplay(e)}\r\n            tabIndex=\"0\"\r\n            className=\"cardRotateContainer\">\r\n            <ul onClick={() => this.props.onClick(this.state.card)}\r\n                className={\"card \" + this.props.display + \" \" + this.props.selected}\r\n            >  {newSpaces} </ul></div>);\r\n    }\r\n}\r\n\r\nfunction Header(props) {\r\n    let myTurn = props.myTurn ? \"My turn\" : \"Not my turn\";\r\n    return <p>{myTurn}</p>\r\n}\r\n\r\nfunction OtherHands(props) {\r\n    return <div className=\"otherHands\">\r\n        {props.played}\r\n    </div>;\r\n}\r\n\r\nfunction PlayedTiles(props) {\r\n    return <div className=\"playedtiles\">{props.played}</div>;\r\n}\r\n\r\nclass MyHand extends React.Component {\r\n    renderButton() {\r\n        if (this.props.gameState === 'discardphase') {\r\n            return <button onClick={() => this.props.discardClicked()} className={\"playbutton\"}>{\"DiscardTiles\"}</button>\r\n        } else {\r\n            return <button disabled={(this.props.gameState === \"setup\") || !this.props.myTurn} onClick={() => this.props.playClicked()} className={\"playbutton\"}>{\"Play Tiles\"}</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"hand\">\r\n            {this.props.cards}\r\n            {this.renderButton()}\r\n        </div>;\r\n    }\r\n}\r\n\r\nfunction Community(props) {\r\n    const basin = props.colorCounts;\r\n    const listBasin = basin.map(color => (\r\n        <button\r\n            className={\"dot \" + color.color}\r\n            key={color.color}\r\n            onClick={() => props.onClick(color)}\r\n        >\r\n            {color.count}\r\n        </button>\r\n    ));\r\n    return <ul>{listBasin}</ul>;\r\n}\r\n\r\nfunction Board(props) {\r\n    const spaces = props.spaces;\r\n    const listBoard = spaces.map((color, index) => (\r\n        <button\r\n            className={\"dot \" + color + \" \" + HEPINDEX[index]}\r\n            key={index}\r\n            onClick={() => props.onClick(color, index)}\r\n        >{}</button>\r\n    ));\r\n    return <ul className=\"board\">{listBoard}</ul>;\r\n}\r\n\r\nfunction Lobby(props) {\r\n    return <button onClick={props.onClick}>{\"Start Game\"}</button>;\r\n}\r\n\r\nclass Display extends React.Component {\r\n    renderSelector() {\r\n        return (\r\n            <Community\r\n                onClick={i => this.props.selectorClick(i)}\r\n                colorCounts={this.props.colorCounts}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderOtherHands() {\r\n        let hands = [];\r\n        for (let i = 0; i < this.props.allPlayed.length; i++) {\r\n            hands.push(<OtherHands played={this.props.allPlayed[i]}/>);\r\n        }\r\n        return hands;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display\">\r\n                {this.renderOtherHands()}\r\n                <Header myTurn={this.props.myTurn}/>\r\n                {this.renderSelector()}\r\n                <Board\r\n                    onClick={(i, j) => this.props.boardClick(i, j)}\r\n                    spaces={this.props.spaces}\r\n                />\r\n                <PlayedTiles played={this.props.played} />\r\n                <MyHand playClicked={() => this.props.playClicked()} \r\n                        discardClicked={() => this.props.discardClicked()}\r\n                        cards={this.props.cards} \r\n                        myTurn={this.props.myTurn}\r\n                        gameState={this.props.gameState}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let selectCards = props.selectCards;\r\n        let cards = selectCards.map((name) => { return (<Card key={name.ID} onClick={(i) => this.handleCardClick(i)} display={\"\"} card={name} />) });\r\n        this.state = {\r\n            playedRaw: props.played,\r\n            played: [],\r\n            selectedColor: null,\r\n            isSwap: false,\r\n            index: null,\r\n            rawCards: selectCards,\r\n            cards: cards,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.on('boardChange', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n        this.props.socket.on('cardPlayed', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n        this.props.socket.on('cardUpdate', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n        this.props.socket.on('discardphase', () => {\r\n           this.setState({\r\n               queuedForDiscard: Array(this.props.discardCount).fill(null)\r\n           }) \r\n        });\r\n    }\r\n    \r\n    handleDiscardClick() {\r\n        let cardsToRemove = this.props.selectCards.slice();\r\n        let cardsToDiscard = this.state.queuedForDiscard.slice();\r\n        let j = 0;\r\n        if (!cardsToDiscard.includes(null)) {\r\n            while (j < cardsToRemove.length) {\r\n                let matched = false;\r\n                for (let k = 0; k < cardsToDiscard.length; k++) {\r\n                    if (cardsEqual(cardsToRemove[j], cardsToDiscard[k])) {\r\n                        cardsToRemove.splice(j, 1);\r\n                        cardsToDiscard.splice(k, 1);\r\n                        matched = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!matched) {\r\n                    j++;\r\n                }\r\n            }\r\n            if (this.props.processCode != null) {\r\n                socket.emit('discardComplete', cardsToRemove);\r\n            } else {\r\n                socket.emit('discardNormalHand', cardsToRemove);\r\n            }\r\n        }\r\n    }\r\n\r\n    handlePlayClick() {\r\n        let number = this.state.selectedNumberCard;\r\n        let action = this.state.selectedActionCard;\r\n        let spaceState = this.props.spaces.slice();\r\n        let tempPlayed = [];\r\n        let cardsToRemove = this.props.selectCards.slice();\r\n        if (number != null && action != null) {\r\n            if (this.isActive(spaceState, number) && this.isActive(spaceState, action) && (action.type != \"A\" && action.type != \"R\" && action.type != \"H\")) {\r\n                let j = 0;\r\n                while (j < cardsToRemove.length) {\r\n                    if (cardsEqual(cardsToRemove[j], number) || cardsEqual(cardsToRemove[j], action)) {\r\n                        tempPlayed.push(cardsToRemove.splice(j, 1)[0]);\r\n                    } else {\r\n                        j++;\r\n                    }\r\n                }\r\n            }\r\n        } else if (action != null) {\r\n            if (this.isActive(spaceState, action) && (action.type === \"A\" || action.type === \"R\" || action.type === \"H\")) {\r\n                let j = 0;\r\n                while (j < cardsToRemove.length) {\r\n                    if (cardsEqual(cardsToRemove[j], action)) {\r\n                        tempPlayed.push(cardsToRemove.splice(j, 1)[0]);\r\n                    } else {\r\n                        j++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            selectedNumberCard: null,\r\n            selectedActionCard: null,\r\n        });\r\n        socket.emit('cardPlayed', {\r\n            newPlayed: tempPlayed,\r\n            rest: cardsToRemove,\r\n            pid: this.props.pid\r\n        });\r\n    }\r\n\r\n    handleCardClick(i) {\r\n        let selectCards = this.props.selectCards.slice();\r\n        let played = this.props.played.slice();\r\n        let cardType = i.type;\r\n        let accessable = this.props.processCode === null ? selectCards.length : this.props.processCode;\r\n        let selectCardsIndex = -1;\r\n        for (let j = 0; j < selectCards.length; j++) {\r\n            if (cardsEqual(i, selectCards[j])) {\r\n                selectCardsIndex = j;\r\n                break;\r\n            }\r\n        }\r\n        if (this.props.gameState === 'discardphase') {\r\n            let tempDiscard = this.state.queuedForDiscard.slice();\r\n            if (selectCardsIndex >= selectCards.length - accessable) {\r\n                let found = false;\r\n                for (let j = 0; j < tempDiscard.length; j++) {\r\n                    if (cardsEqual(tempDiscard[j], i)) {\r\n                        tempDiscard[j] = null;\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found && tempDiscard.includes(null)) {\r\n                    for (let j = 0; j < tempDiscard.length; j++) {\r\n                        if (tempDiscard[j] === null) {\r\n                            tempDiscard[j] = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    queuedForDiscard: tempDiscard,\r\n                    cards: selectCards.map((name) => {\r\n                        let selected = \"\";\r\n                        for (let j = 0; j < tempDiscard.length; j++) {\r\n                            if (cardsEqual(tempDiscard[j], name)) {\r\n                                selected = \"selectedCard\";\r\n                                break;\r\n                            }\r\n                        }\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={\"\"} card={name} />);\r\n                    }),\r\n                })\r\n            }\r\n        } else {\r\n            if (cardType === \"1\" || cardType === \"2\" || cardType === \"3\") {\r\n                let newSelected = (i === this.state.selectedNumberCard) ? null : i;\r\n                this.setState({\r\n                    selectedNumberCard: newSelected,\r\n                    cards: selectCards.map((name) => {\r\n                        let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedActionCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    }),\r\n                    played: played.map((name) => {\r\n                        let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedActionCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    })\r\n                });\r\n            } else {\r\n                let newSelected = (i === this.state.selectedActionCard) ? null : i;\r\n                this.setState({\r\n                    selectedActionCard: newSelected,\r\n                    cards: selectCards.map((name) => {\r\n                        let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedNumberCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    }),\r\n                    played: played.map((name) => {\r\n                        let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedNumberCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    handleSelectorClick(i) {\r\n        if (this.props.currentPlayer === this.props.pid) {\r\n            if (i.count > 0) {\r\n                this.setState({\r\n                    selectedColor: i.color,\r\n                    isSwap: false,\r\n                    index: null,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleBoardClick(i, index) {\r\n        const prevState = this.state;\r\n        if (this.props.currentPlayer === this.props.pid) {\r\n            if (this.props.gameState === \"setup\") {\r\n                if (prevState.selectedColor != null && this.props.spaces[index] === null) {\r\n                    // swap with stack\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    newSpaces[index] = prevState.selectedColor;\r\n                    let newCounts = this.props.colorCounts.slice();\r\n                    let setupcomplete = true;\r\n                    for (var j = 0; j < 7; j++) {\r\n                        if (newSpaces[j] === null) {\r\n                            setupcomplete = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (var j = 0; j < newCounts.length; j++) {\r\n                        if (newCounts[j].color === prevState.selectedColor) {\r\n                            newCounts[j].count--;\r\n                        }\r\n                        if (\r\n                            this.props.spaces[index] != null &&\r\n                            this.props.spaces[index] === newCounts[j].color\r\n                        ) {\r\n                            newCounts[j].count++;\r\n                        }\r\n                    }\r\n                    socket.emit('boardChange', {newSpaces: newSpaces, newCounts: newCounts});\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                        gameState: setupcomplete ? \"\" : \"setup\"\r\n                    });\r\n                }\r\n            } else {\r\n                if (prevState.index === index) {\r\n                    //Selecting already selected deselects\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null\r\n                    });\r\n                } else if (prevState.selectedColor != null) {\r\n                    // swap with stack\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    newSpaces[index] = prevState.selectedColor;\r\n                    let newCounts = this.props.colorCounts.slice();\r\n                    for (var j = 0; j < newCounts.length; j++) {\r\n                        if (newCounts[j].color === prevState.selectedColor) {\r\n                            newCounts[j].count--;\r\n                        }\r\n                        if (\r\n                            this.props.spaces[index] != null &&\r\n                            this.props.spaces[index] === newCounts[j].color\r\n                        ) {\r\n                            newCounts[j].count++;\r\n                        }\r\n                    }\r\n                    socket.emit('boardChange', {newSpaces: newSpaces, newCounts: newCounts});\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                    });\r\n                } else if (prevState.isSwap) {\r\n                    //Swapping with active thing\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    let temp = newSpaces[index];\r\n                    newSpaces[index] = newSpaces[prevState.index];\r\n                    newSpaces[prevState.index] = temp;\r\n                    socket.emit('boardChange', {newSpaces: newSpaces, newCounts: this.props.colorCounts});\r\n                    this.setState({\r\n                        selectColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                    });\r\n                } else {\r\n                    //Selecting for swap\r\n                    this.setState({\r\n                        selectColor: null,\r\n                        isSwap: true,\r\n                        index: index\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateActiveCards(newState, selectCards) {\r\n        return (selectCards.map((name, index) => {\r\n            let active = this.isActive(newState, name) ? \"active\" : \"\";\r\n            let selected = (this.state.selectedActionCard === name || this.state.selectedNumberCard === name) ? \"selectedCard\" : \"\";\r\n            return (<Card key={name.ID} onClick={(i) => this.handleCardClick(i)} selected={selected} display={active} card={name} />);\r\n        }));\r\n    }\r\n\r\n    isActive(newState, name) {\r\n        let active = true;\r\n        let rotation = newState.slice();\r\n        for (var j = 0; j < 7; j++) {\r\n            active = true;\r\n            for (var i = 0; i < 7; i++) {\r\n                if (name[NAMES[i]] !== rotation[i] && name[NAMES[i]] != null) {\r\n                    active = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (active) {\r\n                break;\r\n            }\r\n            let temp = rotation[0];\r\n            for (var i = 0; i < 6; i++) {\r\n                rotation[i] = rotation[i + 1];\r\n            }\r\n            rotation[6] = temp;\r\n        }\r\n        return active;\r\n    }\r\n\r\n    render() {\r\n        let allPlayed = this.props.allPlayed.slice();\r\n        allPlayed.splice(this.props.pid - 1, 1);\r\n        for (let i = 0; i < allPlayed.length; i++) {\r\n            allPlayed[i] = this.updateActiveCards(this.props.spaces, allPlayed[i]);\r\n        }\r\n        let display = <Display\r\n            spaces={this.props.spaces} //[]\r\n            colorCounts={this.props.colorCounts} //[]\r\n            selectorClick={i => this.handleSelectorClick(i)} //function\r\n            boardClick={(i, j) => this.handleBoardClick(i, j)} //function\r\n            cards={this.state.cards} //[<Cards>]\r\n            played={this.state.played}//[<Cards>]\r\n            playClicked={() => this.handlePlayClick()} //function\r\n            discardClicked={() => this.handleDiscardClick()}\r\n            myTurn={this.props.pid === this.props.currentPlayer}\r\n            gameState={this.props.gameState}\r\n            allPlayed={allPlayed}\r\n        />;\r\n        let lobby = <Lobby\r\n            onClick={() => this.startGame()}\r\n        />;\r\n        let showMe = this.props.gameState === \"lobby\" ? lobby : display;\r\n        return (showMe);\r\n    }\r\n}\r\n\r\n//var connectTo = 'https://damoclesgame.herokuapp.com';\r\nvar connectTo = 'http://localhost:3000';\r\nvar socket = io.connect(connectTo);\r\nconsole.log(socket);\r\nsocket.on('initialize', function(data) {\r\n    let localData = Object.assign({}, data);\r\n    socket.on('standby', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('boardChange', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('setupphase', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('cardUpdate', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('discardphase', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('cardPlayed', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    renderGame(localData, socket);\r\n});\r\n\r\nfunction renderGame(data, socket) {\r\n    ReactDOM.render(<Game   spaces={data.spaces} \r\n        colorCounts={data.colorCounts}\r\n        selectCards={data.selectCards}\r\n        gameState={data.gameState}\r\n        pid={data.pid}\r\n        currentPlayer={data.currentPlayer}\r\n        socket={socket}\r\n        played={data.played[data.pid - 1]}\r\n        allPlayed={data.played}\r\n        discardCount={data.discardCount}\r\n        processCode={data.processCode}\r\n\r\n        />, document.getElementById(\"root\"));\r\n}\r\n\r\nfunction cardsEqual(a, b) {\r\n    return (a != null && b != null && a.one === b.one &&\r\n            a.two === b.two &&\r\n            a.three === b.three &&\r\n            a.four === b.four &&\r\n            a.five === b.five &&\r\n            a.six === b.six &&\r\n            a.seven === b.seven &&\r\n            a.type === b.type &&\r\n            a.id === b.id\r\n    );\r\n}"]}