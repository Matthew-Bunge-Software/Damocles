{"version":3,"sources":["../src/index.js"],"names":["COLORS","RED","BLUE","GREEN","BLACK","GOLD","IDS","Set","NAMES","HEPINDEX","map","name","gold","generate","blue","red","green","black","combust","oracle","reflex","conquer","haste","one","two","three","Card","props","state","spaces","card","event","temp","slice","keyCode","hold","i","setState","newSpaces","color","index","push","type","e","rotateDisplay","onClick","display","selected","React","Component","Header","myTurn","OtherHands","played","PlayedTiles","MyHand","gameState","discardClicked","playClicked","cards","renderButton","Community","basin","colorCounts","listBasin","count","Board","listBoard","Lobby","Display","selectorClick","hands","allPlayed","length","renderOtherHands","renderSelector","j","boardClick","Game","selectCards","ID","handleCardClick","playedRaw","selectedColor","isSwap","rawCards","socket","on","updateActiveCards","queuedForDiscard","Array","discardCount","fill","cardsToRemove","cardsToDiscard","includes","matched","k","cardsEqual","splice","processCode","emit","number","selectedNumberCard","action","selectedActionCard","spaceState","tempPlayed","isActive","newPlayed","rest","pid","cardType","accessable","selectCardsIndex","tempDiscard","found","newSelected","active","currentPlayer","prevState","newCounts","setupcomplete","selectColor","newState","rotation","nameSpaces","arraysAreRotations","purgeNull","names","cardSpaces","boardSpaces","purged","handleSelectorClick","handleBoardClick","handlePlayClick","handleDiscardClick","lobby","startGame","showMe","connectTo","io","connect","console","log","data","localData","Object","assign","renderGame","ReactDOM","render","document","getElementById","a","b","four","five","six","seven","id"],"mappings":"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","file":"index.js","sourcesContent":["const COLORS = {\r\n    RED: \"red\",\r\n    BLUE: \"blue\",\r\n    GREEN: \"green\",\r\n    BLACK: \"black\",\r\n    GOLD: \"gold\"\r\n};\r\n\r\nvar IDS = new Set();\r\n\r\nconst NAMES = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"];\r\n\r\nconst HEPINDEX = NAMES.map(name => name + \"hep\");\r\n\r\nvar gold = COLORS.GOLD;\r\nvar generate = \"G\";\r\nvar blue = COLORS.BLUE;\r\nvar red = COLORS.RED;\r\nvar green = COLORS.GREEN;\r\nvar gold = COLORS.GOLD;\r\nvar black = COLORS.BLACK;\r\nvar combust = \"C\";\r\nvar oracle = \"O\";\r\nvar reflex = \"R\";\r\nvar conquer = \"A\";\r\nvar haste = \"H\";\r\nvar one = \"1\";\r\nvar two = \"2\";\r\nvar three = \"3\";\r\n\r\nclass Card extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            spaces: props.card.spaces,\r\n            card: props.card,\r\n        }\r\n    }\r\n\r\n    rotateDisplay(event) {\r\n        let temp = this.state.spaces.slice();\r\n        if (event.keyCode === 81) {\r\n            let hold = temp[0];\r\n            for (var i = 0; i < 6; i++) {\r\n                temp[i] = temp[i + 1];\r\n            }\r\n            temp[6] = hold;\r\n        } else if (event.keyCode === 69) {\r\n            let hold = temp[6];\r\n            for (var i = 6; i > 0; i--) {\r\n                temp[i] = temp[i - 1];\r\n            }\r\n            temp[0] = hold;\r\n        }\r\n        this.setState({\r\n            spaces: temp\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let newSpaces = this.state.spaces.map((color, index) => <li key={index} className={\"dot small \" + color + \" \" + HEPINDEX[index]}>{}</li>);\r\n        newSpaces.push(<li key={7} className=\"cardType\">{this.props.card.type}</li>);\r\n        return (<div onKeyDown={(e) => this.rotateDisplay(e)}\r\n            tabIndex=\"0\"\r\n            className=\"cardRotateContainer\">\r\n            <ul onClick={() => this.props.onClick(this.state.card)}\r\n                className={\"card \" + this.props.display + \" \" + this.props.selected}\r\n            >  {newSpaces} </ul></div>);\r\n    }\r\n}\r\n\r\nfunction Header(props) {\r\n    let myTurn = props.myTurn ? \"My turn\" : \"Not my turn\";\r\n    return <p>{myTurn}</p>\r\n}\r\n\r\nfunction OtherHands(props) {\r\n    return <div className=\"otherHands\">\r\n        {props.played}\r\n    </div>;\r\n}\r\n\r\nfunction PlayedTiles(props) {\r\n    return <div className=\"playedtiles\">{props.played}</div>;\r\n}\r\n\r\nclass MyHand extends React.Component {\r\n    renderButton() {\r\n        if (this.props.gameState === 'discardphase') {\r\n            return <button onClick={() => this.props.discardClicked()} className={\"playbutton\"}>{\"DiscardTiles\"}</button>\r\n        } else {\r\n            return <button disabled={(this.props.gameState === \"setup\") || !this.props.myTurn} onClick={() => this.props.playClicked()} className={\"playbutton\"}>{\"Play Tiles\"}</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"hand\">\r\n            {this.props.cards}\r\n            {this.renderButton()}\r\n        </div>;\r\n    }\r\n}\r\n\r\nfunction Community(props) {\r\n    const basin = props.colorCounts;\r\n    const listBasin = basin.map(color => (\r\n        <button\r\n            className={\"dot \" + color.color}\r\n            key={color.color}\r\n            onClick={() => props.onClick(color)}\r\n        >\r\n            {color.count}\r\n        </button>\r\n    ));\r\n    return <ul>{listBasin}</ul>;\r\n}\r\n\r\nfunction Board(props) {\r\n    const spaces = props.spaces;\r\n    const listBoard = spaces.map((color, index) => (\r\n        <button\r\n            className={\"dot \" + color + \" \" + HEPINDEX[index]}\r\n            key={index}\r\n            onClick={() => props.onClick(color, index)}\r\n        >{}</button>\r\n    ));\r\n    return <ul className=\"board\">{listBoard}</ul>;\r\n}\r\n\r\nfunction Lobby(props) {\r\n    return <button onClick={props.onClick}>{\"Start Game\"}</button>;\r\n}\r\n\r\nclass Display extends React.Component {\r\n    renderSelector() {\r\n        return (\r\n            <Community\r\n                onClick={i => this.props.selectorClick(i)}\r\n                colorCounts={this.props.colorCounts}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderOtherHands() {\r\n        let hands = [];\r\n        for (let i = 0; i < this.props.allPlayed.length; i++) {\r\n            hands.push(<OtherHands played={this.props.allPlayed[i]}/>);\r\n        }\r\n        return hands;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display\">\r\n                {this.renderOtherHands()}\r\n                <Header myTurn={this.props.myTurn}/>\r\n                {this.renderSelector()}\r\n                <Board\r\n                    onClick={(i, j) => this.props.boardClick(i, j)}\r\n                    spaces={this.props.spaces}\r\n                />\r\n                <PlayedTiles played={this.props.played} />\r\n                <MyHand playClicked={() => this.props.playClicked()} \r\n                        discardClicked={() => this.props.discardClicked()}\r\n                        cards={this.props.cards} \r\n                        myTurn={this.props.myTurn}\r\n                        gameState={this.props.gameState}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let selectCards = props.selectCards;\r\n        let cards = selectCards.map((name) => { return (<Card key={name.ID} onClick={(i) => this.handleCardClick(i)} display={\"\"} card={name} />) });\r\n        this.state = {\r\n            playedRaw: props.played,\r\n            played: [],\r\n            selectedColor: null,\r\n            isSwap: false,\r\n            index: null,\r\n            rawCards: selectCards,\r\n            cards: cards,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.on('boardChange', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n        this.props.socket.on('cardPlayed', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n        this.props.socket.on('cardUpdate', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n        this.props.socket.on('discardphase', () => {\r\n           this.setState({\r\n               queuedForDiscard: Array(this.props.discardCount).fill(null)\r\n           }) \r\n        });\r\n    }\r\n    \r\n    handleDiscardClick() {\r\n        let cardsToRemove = this.props.selectCards.slice();\r\n        let cardsToDiscard = this.state.queuedForDiscard.slice();\r\n        let j = 0;\r\n        if (!cardsToDiscard.includes(null)) {\r\n            while (j < cardsToRemove.length) {\r\n                let matched = false;\r\n                for (let k = 0; k < cardsToDiscard.length; k++) {\r\n                    if (cardsEqual(cardsToRemove[j], cardsToDiscard[k])) {\r\n                        cardsToRemove.splice(j, 1);\r\n                        cardsToDiscard.splice(k, 1);\r\n                        matched = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!matched) {\r\n                    j++;\r\n                }\r\n            }\r\n            if (this.props.processCode === null) {\r\n                socket.emit('discardPresetup', cardsToRemove);\r\n            } else {\r\n                socket.emit('discardNormalHand', cardsToRemove);\r\n            }\r\n        }\r\n    }\r\n\r\n    handlePlayClick() {\r\n        let number = this.state.selectedNumberCard;\r\n        let action = this.state.selectedActionCard;\r\n        let spaceState = this.props.spaces.slice();\r\n        let tempPlayed = [];\r\n        let cardsToRemove = this.props.selectCards.slice();\r\n        if (number != null && action != null) {\r\n            if (this.isActive(spaceState, number) && this.isActive(spaceState, action) && (action.type != \"A\" && action.type != \"R\" && action.type != \"H\")) {\r\n                let j = 0;\r\n                while (j < cardsToRemove.length) {\r\n                    if (cardsEqual(cardsToRemove[j], number) || cardsEqual(cardsToRemove[j], action)) {\r\n                        tempPlayed.push(cardsToRemove.splice(j, 1)[0]);\r\n                    } else {\r\n                        j++;\r\n                    }\r\n                }\r\n            }\r\n        } else if (action != null) {\r\n            if (this.isActive(spaceState, action) && (action.type === \"A\" || action.type === \"R\" || action.type === \"H\")) {\r\n                let j = 0;\r\n                while (j < cardsToRemove.length) {\r\n                    if (cardsEqual(cardsToRemove[j], action)) {\r\n                        tempPlayed.push(cardsToRemove.splice(j, 1)[0]);\r\n                    } else {\r\n                        j++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            selectedNumberCard: null,\r\n            selectedActionCard: null,\r\n        });\r\n        socket.emit('cardPlayed', {\r\n            newPlayed: tempPlayed,\r\n            rest: cardsToRemove,\r\n            pid: this.props.pid\r\n        });\r\n    }\r\n\r\n    handleCardClick(i) {\r\n        let selectCards = this.props.selectCards.slice();\r\n        let played = this.props.played.slice();\r\n        let cardType = i.type;\r\n        let accessable = this.props.processCode === null ? selectCards.length : this.props.processCode;\r\n        let selectCardsIndex = -1;\r\n        for (let j = 0; j < selectCards.length; j++) {\r\n            if (cardsEqual(i, selectCards[j])) {\r\n                selectCardsIndex = j;\r\n                break;\r\n            }\r\n        }\r\n        if (this.props.gameState === 'discardphase') {\r\n            let tempDiscard = this.state.queuedForDiscard.slice();\r\n            if (selectCardsIndex >= selectCards.length - accessable) {\r\n                let found = false;\r\n                for (let j = 0; j < tempDiscard.length; j++) {\r\n                    if (cardsEqual(tempDiscard[j], i)) {\r\n                        tempDiscard[j] = null;\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found && tempDiscard.includes(null)) {\r\n                    for (let j = 0; j < tempDiscard.length; j++) {\r\n                        if (tempDiscard[j] === null) {\r\n                            tempDiscard[j] = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    queuedForDiscard: tempDiscard,\r\n                    cards: selectCards.map((name) => {\r\n                        let selected = \"\";\r\n                        for (let j = 0; j < tempDiscard.length; j++) {\r\n                            if (cardsEqual(tempDiscard[j], name)) {\r\n                                selected = \"selectedCard\";\r\n                                break;\r\n                            }\r\n                        }\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={\"\"} card={name} />);\r\n                    }),\r\n                })\r\n            }\r\n        } else {\r\n            if (cardType === \"1\" || cardType === \"2\" || cardType === \"3\") {\r\n                let newSelected = (i === this.state.selectedNumberCard) ? null : i;\r\n                this.setState({\r\n                    selectedNumberCard: newSelected,\r\n                    cards: selectCards.map((name) => {\r\n                        let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedActionCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    }),\r\n                    played: played.map((name) => {\r\n                        let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedActionCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    })\r\n                });\r\n            } else {\r\n                let newSelected = (i === this.state.selectedActionCard) ? null : i;\r\n                this.setState({\r\n                    selectedActionCard: newSelected,\r\n                    cards: selectCards.map((name) => {\r\n                        let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedNumberCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    }),\r\n                    played: played.map((name) => {\r\n                        let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                        let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedNumberCard)) ? \"selectedCard\" : \"\";\r\n                        return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    handleSelectorClick(i) {\r\n        if (this.props.currentPlayer === this.props.pid) {\r\n            if (i.count > 0) {\r\n                this.setState({\r\n                    selectedColor: i.color,\r\n                    isSwap: false,\r\n                    index: null,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleBoardClick(i, index) {\r\n        const prevState = this.state;\r\n        if (this.props.currentPlayer === this.props.pid) {\r\n            if (this.props.gameState === \"setup\") {\r\n                if (prevState.selectedColor != null && this.props.spaces[index] === null) {\r\n                    // swap with stack\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    newSpaces[index] = prevState.selectedColor;\r\n                    let newCounts = this.props.colorCounts.slice();\r\n                    let setupcomplete = true;\r\n                    for (var j = 0; j < 7; j++) {\r\n                        if (newSpaces[j] === null) {\r\n                            setupcomplete = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (var j = 0; j < newCounts.length; j++) {\r\n                        if (newCounts[j].color === prevState.selectedColor) {\r\n                            newCounts[j].count--;\r\n                        }\r\n                        if (\r\n                            this.props.spaces[index] != null &&\r\n                            this.props.spaces[index] === newCounts[j].color\r\n                        ) {\r\n                            newCounts[j].count++;\r\n                        }\r\n                    }\r\n                    socket.emit('boardChange', {newSpaces: newSpaces, newCounts: newCounts});\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                        gameState: setupcomplete ? \"\" : \"setup\"\r\n                    });\r\n                }\r\n            } else {\r\n                if (prevState.index === index) {\r\n                    //Selecting already selected deselects\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null\r\n                    });\r\n                } else if (prevState.selectedColor != null) {\r\n                    // swap with stack\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    newSpaces[index] = prevState.selectedColor;\r\n                    let newCounts = this.props.colorCounts.slice();\r\n                    for (var j = 0; j < newCounts.length; j++) {\r\n                        if (newCounts[j].color === prevState.selectedColor) {\r\n                            newCounts[j].count--;\r\n                        }\r\n                        if (\r\n                            this.props.spaces[index] != null &&\r\n                            this.props.spaces[index] === newCounts[j].color\r\n                        ) {\r\n                            newCounts[j].count++;\r\n                        }\r\n                    }\r\n                    socket.emit('boardChange', {newSpaces: newSpaces, newCounts: newCounts});\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                    });\r\n                } else if (prevState.isSwap) {\r\n                    //Swapping with active thing\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    let temp = newSpaces[index];\r\n                    newSpaces[index] = newSpaces[prevState.index];\r\n                    newSpaces[prevState.index] = temp;\r\n                    socket.emit('boardChange', {newSpaces: newSpaces, newCounts: this.props.colorCounts});\r\n                    this.setState({\r\n                        selectColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                    });\r\n                } else {\r\n                    //Selecting for swap\r\n                    this.setState({\r\n                        selectColor: null,\r\n                        isSwap: true,\r\n                        index: index\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateActiveCards(newState, selectCards) {\r\n        return (selectCards.map((name, index) => {\r\n            let active = this.isActive(newState, name) ? \"active\" : \"\";\r\n            let selected = (this.state.selectedActionCard === name || this.state.selectedNumberCard === name) ? \"selectedCard\" : \"\";\r\n            return (<Card key={name.ID} onClick={(i) => this.handleCardClick(i)} selected={selected} display={active} card={name} />);\r\n        }));\r\n    }\r\n\r\n    isActive(newState, name) {\r\n        let rotation = newState.slice();\r\n        let nameSpaces = name.spaces.slice();\r\n        return this.arraysAreRotations(nameSpaces, rotation);\r\n    }\r\n\r\n    isActiveHasted(newState, name) {\r\n        let rotation = this.purgeNull(newState);\r\n        let nameSpaces = this.purgeNull(names.spaces);\r\n        return this.arraysAreRotations(nameSpaces, rotation);\r\n    }\r\n\r\n    arraysAreRotations(cardSpaces, boardSpaces) {\r\n        let active = true;\r\n        if (cardSpaces.length != boardSpaces.length) {\r\n            active = false;\r\n        } else {\r\n            for (let j = 0; j < boardSpaces.length; j++) {\r\n                active = true;\r\n                for (let i = 0; i < boardSpaces.length; i++) {\r\n                    if (cardSpaces[i] !== boardSpaces[i] && cardSpaces[i] != null) {\r\n                        active = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (active) {\r\n                    break;\r\n                }\r\n                let temp = boardSpaces[0];\r\n                for (let i = 0; i < boardSpaces.length; i++) {\r\n                    boardSpaces[i] = boardSpaces[i + 1];\r\n                }\r\n                boardSpaces[boardSpaces.length - 1] = temp;\r\n            }\r\n        }\r\n        return active;\r\n    }\r\n\r\n    purgeNull(name) {\r\n        let purged = name.slice();\r\n        let j = 0;\r\n        while (j < purged.length) {\r\n            if (purged[j] === null) {\r\n                purged.splice(j, 1);\r\n            } else {\r\n                j++;\r\n            }\r\n        }\r\n        return purged;\r\n    }\r\n\r\n    render() {\r\n        let allPlayed = this.props.allPlayed.slice();\r\n        allPlayed.splice(this.props.pid - 1, 1);\r\n        for (let i = 0; i < allPlayed.length; i++) {\r\n            allPlayed[i] = this.updateActiveCards(this.props.spaces, allPlayed[i]);\r\n        }\r\n        let display = <Display\r\n            spaces={this.props.spaces} //[]\r\n            colorCounts={this.props.colorCounts} //[]\r\n            selectorClick={i => this.handleSelectorClick(i)} //function\r\n            boardClick={(i, j) => this.handleBoardClick(i, j)} //function\r\n            cards={this.state.cards} //[<Cards>]\r\n            played={this.state.played}//[<Cards>]\r\n            playClicked={() => this.handlePlayClick()} //function\r\n            discardClicked={() => this.handleDiscardClick()}\r\n            myTurn={this.props.pid === this.props.currentPlayer}\r\n            gameState={this.props.gameState}\r\n            allPlayed={allPlayed}\r\n        />;\r\n        let lobby = <Lobby\r\n            onClick={() => this.startGame()}\r\n        />;\r\n        let showMe = this.props.gameState === \"lobby\" ? lobby : display;\r\n        return (showMe);\r\n    }\r\n}\r\n\r\n//var connectTo = 'https://damoclesgame.herokuapp.com';\r\nvar connectTo = 'http://localhost:3000';\r\nvar socket = io.connect(connectTo);\r\nconsole.log(socket);\r\nsocket.on('initialize', function(data) {\r\n    let localData = Object.assign({}, data);\r\n    socket.on('standby', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('boardChange', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('setupphase', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('cardUpdate', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('discardphase', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('cardPlayed', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    renderGame(localData, socket);\r\n});\r\n\r\nfunction renderGame(data, socket) {\r\n    ReactDOM.render(<Game   spaces={data.spaces} \r\n        colorCounts={data.colorCounts}\r\n        selectCards={data.selectCards}\r\n        gameState={data.gameState}\r\n        pid={data.pid}\r\n        currentPlayer={data.currentPlayer}\r\n        socket={socket}\r\n        played={data.played[data.pid - 1]}\r\n        allPlayed={data.played}\r\n        discardCount={data.discardCount}\r\n        processCode={data.processCode}\r\n\r\n        />, document.getElementById(\"root\"));\r\n}\r\n\r\nfunction cardsEqual(a, b) {\r\n    return (a != null && b != null && a.one === b.one &&\r\n            a.two === b.two &&\r\n            a.three === b.three &&\r\n            a.four === b.four &&\r\n            a.five === b.five &&\r\n            a.six === b.six &&\r\n            a.seven === b.seven &&\r\n            a.type === b.type &&\r\n            a.id === b.id\r\n    );\r\n}"]}