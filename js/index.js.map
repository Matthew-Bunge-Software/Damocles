{"version":3,"sources":["../src/index.js"],"names":["COLORS","RED","BLUE","GREEN","BLACK","GOLD","IDS","Set","NAMES","HEPINDEX","map","name","gold","generate","blue","red","green","black","combust","oracle","reflex","conquer","haste","one","two","three","Card","props","spaces","Array","fill","card","four","five","six","seven","state","event","temp","slice","keyCode","hold","i","setState","newSpaces","color","index","push","type","e","rotateDisplay","onClick","display","selected","React","Component","Header","myTurn","OtherHands","played","PlayedTiles","MyHand","cards","gameState","playClicked","Community","basin","colorCounts","listBasin","count","Board","listBoard","Lobby","Display","selectorClick","hands","allPlayed","length","renderOtherHands","renderSelector","j","boardClick","Game","selectCards","ID","handleCardClick","playedRaw","selectedColor","isSwap","rawCards","socket","on","updateActiveCards","number","selectedNumberCard","action","selectedActionCard","spaceState","tempPlayed","cardsToRemove","isActive","splice","emit","newPlayed","rest","pid","cardType","newSelected","active","cardsEqual","currentPlayer","prevState","newCounts","setupcomplete","selectColor","newState","rotation","handleSelectorClick","handleBoardClick","handlePlayClick","lobby","startGame","showMe","io","connect","console","log","data","localData","Object","assign","renderGame","ReactDOM","render","document","getElementById","a","b","id"],"mappings":"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","file":"index.js","sourcesContent":["const COLORS = {\r\n    RED: \"red\",\r\n    BLUE: \"blue\",\r\n    GREEN: \"green\",\r\n    BLACK: \"black\",\r\n    GOLD: \"gold\"\r\n};\r\n\r\nvar IDS = new Set();\r\n\r\nconst NAMES = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"];\r\n\r\nconst HEPINDEX = NAMES.map(name => name + \"hep\");\r\n\r\nvar gold = COLORS.GOLD;\r\nvar generate = \"G\";\r\nvar blue = COLORS.BLUE;\r\nvar red = COLORS.RED;\r\nvar green = COLORS.GREEN;\r\nvar gold = COLORS.GOLD;\r\nvar black = COLORS.BLACK;\r\nvar combust = \"C\";\r\nvar oracle = \"O\";\r\nvar reflex = \"R\";\r\nvar conquer = \"A\";\r\nvar haste = \"H\";\r\nvar one = \"1\";\r\nvar two = \"2\";\r\nvar three = \"3\";\r\n\r\nclass Card extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const spaces = Array(7).fill(null);\r\n        if (props.card.one != null) { spaces[0] = props.card.one; }\r\n        if (props.card.two != null) { spaces[1] = props.card.two; }\r\n        if (props.card.three != null) { spaces[2] = props.card.three; }\r\n        if (props.card.four != null) { spaces[3] = props.card.four; }\r\n        if (props.card.five != null) { spaces[4] = props.card.five; }\r\n        if (props.card.six != null) { spaces[5] = props.card.six; }\r\n        if (props.card.seven != null) { spaces[6] = props.card.seven; }\r\n        this.state = {\r\n            spaces: spaces,\r\n            card: props.card,\r\n        }\r\n    }\r\n\r\n    rotateDisplay(event) {\r\n        let temp = this.state.spaces.slice();\r\n        if (event.keyCode === 81) {\r\n            let hold = temp[0];\r\n            for (var i = 0; i < 6; i++) {\r\n                temp[i] = temp[i + 1];\r\n            }\r\n            temp[6] = hold;\r\n        } else if (event.keyCode === 69) {\r\n            let hold = temp[6];\r\n            for (var i = 6; i > 0; i--) {\r\n                temp[i] = temp[i - 1];\r\n            }\r\n            temp[0] = hold;\r\n        }\r\n        this.setState({\r\n            spaces: temp\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let newSpaces = this.state.spaces.map((color, index) => <li key={index} className={\"dot small \" + color + \" \" + HEPINDEX[index]}>{}</li>);\r\n        newSpaces.push(<li key={7} className=\"cardType\">{this.props.card.type}</li>);\r\n        return (<div onKeyDown={(e) => this.rotateDisplay(e)}\r\n            tabIndex=\"0\"\r\n            className=\"cardRotateContainer\">\r\n            <ul onClick={() => this.props.onClick(this.state.card)}\r\n                className={\"card \" + this.props.display + \" \" + this.props.selected}\r\n            >  {newSpaces} </ul></div>);\r\n    }\r\n}\r\n\r\nfunction Header(props) {\r\n    let myTurn = props.myTurn ? \"My turn\" : \"Not my turn\";\r\n    return <p>{myTurn}</p>\r\n}\r\n\r\nfunction OtherHands(props) {\r\n    return <div className=\"otherHands\">\r\n        {props.played}\r\n    </div>;\r\n}\r\n\r\nfunction PlayedTiles(props) {\r\n    return <div className=\"playedtiles\">{props.played}</div>;\r\n}\r\n\r\nfunction MyHand(props) {\r\n    return <div className=\"hand\">\r\n        {props.cards}\r\n        <button disabled={(props.gameState === \"setup\") || !props.myTurn} onClick={() => props.playClicked()} className={\"playbutton\"}>{\"Play Tiles\"}</button>\r\n    </div>;\r\n}\r\n\r\nfunction Community(props) {\r\n    const basin = props.colorCounts;\r\n    const listBasin = basin.map(color => (\r\n        <button\r\n            className={\"dot \" + color.color}\r\n            key={color.color}\r\n            onClick={() => props.onClick(color)}\r\n        >\r\n            {color.count}\r\n        </button>\r\n    ));\r\n    return <ul>{listBasin}</ul>;\r\n}\r\n\r\nfunction Board(props) {\r\n    const spaces = props.spaces;\r\n    const listBoard = spaces.map((color, index) => (\r\n        <button\r\n            className={\"dot \" + color + \" \" + HEPINDEX[index]}\r\n            key={index}\r\n            onClick={() => props.onClick(color, index)}\r\n        >\r\n            {}\r\n        </button>\r\n    ));\r\n    return <ul className=\"board\">{listBoard}</ul>;\r\n}\r\n\r\nfunction Lobby(props) {\r\n    return <button onClick={props.onClick}>{\"Start Game\"}</button>;\r\n}\r\n\r\nclass Display extends React.Component {\r\n    renderSelector() {\r\n        return (\r\n            <Community\r\n                onClick={i => this.props.selectorClick(i)}\r\n                colorCounts={this.props.colorCounts}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderOtherHands() {\r\n        let hands = [];\r\n        for (let i = 0; i < this.props.allPlayed.length; i++) {\r\n            hands.push(<OtherHands played={this.props.allPlayed[i]}/>);\r\n        }\r\n        return hands;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display\">\r\n                {this.renderOtherHands()}\r\n                <Header myTurn={this.props.myTurn}/>\r\n                {this.renderSelector()}\r\n                <Board\r\n                    onClick={(i, j) => this.props.boardClick(i, j)}\r\n                    spaces={this.props.spaces}\r\n                />\r\n                <PlayedTiles played={this.props.played} />\r\n                <MyHand playClicked={() => this.props.playClicked()} \r\n                        cards={this.props.cards} \r\n                        myTurn={this.props.myTurn}\r\n                        gameState={this.props.gameState}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let selectCards = props.selectCards;\r\n        let cards = selectCards.map((name) => { return (<Card key={name.ID} onClick={(i) => this.handleCardClick(i)} display={\"\"} card={name} />) });\r\n        this.state = {\r\n            playedRaw: props.played,\r\n            played: [],\r\n            selectedColor: null,\r\n            isSwap: false,\r\n            index: null,\r\n            rawCards: selectCards,\r\n            cards: cards\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.on('boardChange', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n        this.props.socket.on('cardPlayed', () => {\r\n            this.setState({\r\n                cards: this.updateActiveCards(this.props.spaces, this.props.selectCards),\r\n                played: this.updateActiveCards(this.props.spaces, this.props.played)\r\n            });\r\n        });\r\n    }\r\n    \r\n    handlePlayClick() {\r\n        let number = this.state.selectedNumberCard;\r\n        let action = this.state.selectedActionCard;\r\n        let spaceState = this.props.spaces.slice();\r\n        let tempPlayed = [];\r\n        let cardsToRemove = this.state.rawCards.slice();\r\n        if (number != null && action != null) {\r\n            if (this.isActive(spaceState, number) && this.isActive(spaceState, action) && (action.type != \"A\" && action.type != \"R\" && action.type != \"H\")) {\r\n                let j = 0;\r\n                while (j < cardsToRemove.length) {\r\n                    if (cardsToRemove[j] === number || cardsToRemove[j] === action) {\r\n                        tempPlayed.push(cardsToRemove.splice(j, 1)[0]);\r\n                    } else {\r\n                        j++;\r\n                    }\r\n                }\r\n            }\r\n        } else if (action != null) {\r\n            if (this.isActive(spaceState, action) && (action.type === \"A\" || action.type === \"R\" || action.type === \"H\")) {\r\n                let j = 0;\r\n                while (j < cardsToRemove.length) {\r\n                    if (cardsToRemove[j] === action) {\r\n                        tempPlayed.push(cardsToRemove.splice(j, 1)[0]);\r\n                    } else {\r\n                        j++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            selectedNumberCard: null,\r\n            selectedActionCard: null,\r\n        });\r\n        socket.emit('cardPlayed', {\r\n            newPlayed: tempPlayed,\r\n            rest: cardsToRemove,\r\n            pid: this.props.pid\r\n        });\r\n    }\r\n\r\n    handleCardClick(i) {\r\n        let selectCards = this.props.selectCards.slice();\r\n        let played = this.props.played.slice();\r\n        let cardType = i.type;\r\n        if (cardType === \"1\" || cardType === \"2\" || cardType === \"3\") {\r\n            let newSelected = (i === this.state.selectedNumberCard) ? null : i;\r\n            this.setState({\r\n                selectedNumberCard: newSelected,\r\n                cards: selectCards.map((name) => {\r\n                    let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                    let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedActionCard)) ? \"selectedCard\" : \"\";\r\n                    return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                }),\r\n                played: played.map((name) => {\r\n                    let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                    let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedActionCard)) ? \"selectedCard\" : \"\";\r\n                    return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                })\r\n            });\r\n        } else {\r\n            let newSelected = (i === this.state.selectedActionCard) ? null : i;\r\n            this.setState({\r\n                selectedActionCard: newSelected,\r\n                cards: selectCards.map((name) => {\r\n                    let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                    let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedNumberCard)) ? \"selectedCard\" : \"\";\r\n                    return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                }),\r\n                played: played.map((name) => {\r\n                    let active = this.isActive(this.props.spaces, name) ? \"active\" : \"\";\r\n                    let selected = (cardsEqual(name, newSelected) || cardsEqual(name, this.state.selectedNumberCard)) ? \"selectedCard\" : \"\";\r\n                    return (<Card key={name.ID} selected={selected} onClick={(i) => this.handleCardClick(i)} display={active} card={name} />);\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSelectorClick(i) {\r\n        if (this.props.currentPlayer === this.props.pid) {\r\n            if (i.count > 0) {\r\n                this.setState({\r\n                    selectedColor: i.color,\r\n                    isSwap: false,\r\n                    index: null,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleBoardClick(i, index) {\r\n        const prevState = this.state;\r\n        if (this.props.currentPlayer === this.props.pid) {\r\n            if (this.props.gameState === \"setup\") {\r\n                if (prevState.selectedColor != null && this.props.spaces[index] === null) {\r\n                    // swap with stack\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    newSpaces[index] = prevState.selectedColor;\r\n                    let newCounts = this.props.colorCounts.slice();\r\n                    let setupcomplete = true;\r\n                    for (var j = 0; j < 7; j++) {\r\n                        if (newSpaces[j] === null) {\r\n                            setupcomplete = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (var j = 0; j < newCounts.length; j++) {\r\n                        if (newCounts[j].color === prevState.selectedColor) {\r\n                            newCounts[j].count--;\r\n                        }\r\n                        if (\r\n                            this.props.spaces[index] != null &&\r\n                            this.props.spaces[index] === newCounts[j].color\r\n                        ) {\r\n                            newCounts[j].count++;\r\n                        }\r\n                    }\r\n                    socket.emit('boardChange', {newSpaces: newSpaces, newCounts: newCounts});\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                        gameState: setupcomplete ? \"\" : \"setup\"\r\n                    });\r\n                }\r\n            } else {\r\n                if (prevState.index === index) {\r\n                    //Selecting already selected deselects\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null\r\n                    });\r\n                } else if (prevState.selectedColor != null) {\r\n                    // swap with stack\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    newSpaces[index] = prevState.selectedColor;\r\n                    let newCounts = this.props.colorCounts.slice();\r\n                    for (var j = 0; j < newCounts.length; j++) {\r\n                        if (newCounts[j].color === prevState.selectedColor) {\r\n                            newCounts[j].count--;\r\n                        }\r\n                        if (\r\n                            this.props.spaces[index] != null &&\r\n                            this.props.spaces[index] === newCounts[j].color\r\n                        ) {\r\n                            newCounts[j].count++;\r\n                        }\r\n                    }\r\n                    socket.emit('boardChange', {newSpaces: newSpaces, newCounts: newCounts});\r\n                    this.setState({\r\n                        selectedColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                    });\r\n                } else if (prevState.isSwap) {\r\n                    //Swapping with active thing\r\n                    let newSpaces = this.props.spaces.slice();\r\n                    let temp = newSpaces[index];\r\n                    newSpaces[index] = newSpaces[prevState.index];\r\n                    newSpaces[prevState.index] = temp;\r\n                    socket.emit('boardChange', {newSpaces: newSpaces, newCounts: this.props.colorCounts});\r\n                    this.setState({\r\n                        selectColor: null,\r\n                        isSwap: false,\r\n                        index: null,\r\n                    });\r\n                } else {\r\n                    //Selecting for swap\r\n                    this.setState({\r\n                        selectColor: null,\r\n                        isSwap: true,\r\n                        index: index\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateActiveCards(newState, selectCards) {\r\n        return (selectCards.map((name, index) => {\r\n            let active = this.isActive(newState, name) ? \"active\" : \"\";\r\n            let selected = (this.state.selectedActionCard === name || this.state.selectedNumberCard === name) ? \"selectedCard\" : \"\";\r\n            return (<Card key={name.ID} onClick={(i) => this.handleCardClick(i)} selected={selected} display={active} card={name} />);\r\n        }));\r\n    }\r\n\r\n    isActive(newState, name) {\r\n        let active = true;\r\n        let rotation = newState.slice();\r\n        for (var j = 0; j < 7; j++) {\r\n            active = true;\r\n            for (var i = 0; i < 7; i++) {\r\n                if (name[NAMES[i]] !== rotation[i] && name[NAMES[i]] != null) {\r\n                    active = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (active) {\r\n                break;\r\n            }\r\n            let temp = rotation[0];\r\n            for (var i = 0; i < 6; i++) {\r\n                rotation[i] = rotation[i + 1];\r\n            }\r\n            rotation[6] = temp;\r\n        }\r\n        return active;\r\n    }\r\n\r\n    render() {\r\n        let allPlayed = this.props.allPlayed.slice();\r\n        allPlayed.splice(this.props.pid - 1, 1);\r\n        for (let i = 0; i < allPlayed.length; i++) {\r\n            allPlayed[i] = this.updateActiveCards(this.props.spaces, allPlayed[i]);\r\n        }\r\n        let display = <Display\r\n            spaces={this.props.spaces} //[]\r\n            colorCounts={this.props.colorCounts} //[]\r\n            selectorClick={i => this.handleSelectorClick(i)} //function\r\n            boardClick={(i, j) => this.handleBoardClick(i, j)} //function\r\n            cards={this.state.cards} //[<Cards>]\r\n            played={this.state.played}//[<Cards>]\r\n            playClicked={() => this.handlePlayClick()} //function\r\n            myTurn={this.props.pid === this.props.currentPlayer}\r\n            gameState={this.props.gameState}\r\n            allPlayed={allPlayed}\r\n        />;\r\n        let lobby = <Lobby\r\n            onClick={() => this.startGame()}\r\n        />;\r\n        let showMe = this.props.gameState === \"lobby\" ? lobby : display;\r\n        return (showMe);\r\n    }\r\n}\r\n\r\nvar socket = io.connect('https://damoclesgame.herokuapp.com');\r\nconsole.log(socket);\r\nsocket.on('initialize', function(data) {\r\n    let localData = Object.assign({}, data);\r\n    socket.on('boardChange', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('setupphase', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('cardUpdate', function(data) {\r\n        Object.assign(localData, data);\r\n        console.log(localData);\r\n        renderGame(localData, socket);\r\n    });\r\n    socket.on('cardPlayed', function(data) {\r\n        Object.assign(localData, data);\r\n        renderGame(localData, socket);\r\n    });\r\n    renderGame(localData, socket);\r\n});\r\n\r\nfunction renderGame(data, socket) {\r\n    ReactDOM.render(<Game   spaces={data.spaces} \r\n        colorCounts={data.colorCounts}\r\n        selectCards={data.selectCards}\r\n        gameState={data.gameState}\r\n        pid={data.pid}\r\n        currentPlayer={data.currentPlayer}\r\n        socket={socket}\r\n        played={data.played[data.pid - 1]}\r\n        allPlayed={data.played}\r\n\r\n        />, document.getElementById(\"root\"));\r\n}\r\n\r\nfunction cardsEqual(a, b) {\r\n    return (a != null && b != null && a.one === b.one &&\r\n            a.two === b.two &&\r\n            a.three === b.three &&\r\n            a.four === b.four &&\r\n            a.five === b.five &&\r\n            a.six === b.six &&\r\n            a.seven === b.seven &&\r\n            a.type === b.type &&\r\n            a.id === b.id\r\n    );\r\n}"]}